generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String? // ✅ Password can be null for OAuth users
  image     String? // ✅ Store profile image from Google
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookmarks Bookmark[]
  accounts  Account[]
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  provider          String
  providerAccountId String
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Source {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  sourceUrl String   @unique // ✅ Added source URL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  news      News[]
  bookmarks Bookmark[] // ✅ Add this to establish the relation
}
model News {
  id          Int        @id @default(autoincrement()) // Internal ID
  newsId      Int
  uuid        String     @unique @default(uuid())
  title       String
  content     String
  url         String
  sourceId    Int
  publishedAt DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  source    Source       @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  bookmarks Bookmark[]   // A news item can be bookmarked by many users

  @@unique([newsId, sourceId]) // ✅ Ensuring uniqueness
}

model Bookmark {
  id        Int       @id @default(autoincrement())
  uuid      String
  userId    Int
  newsId    Int
  sourceId  Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

 user   User   @relation(fields: [userId], references: [id])
  news   News   @relation(fields: [newsId, sourceId], references: [newsId, sourceId]) // Reference composite key
  source Source @relation(fields: [sourceId], references: [id])

  @@unique([userId, newsId, sourceId]) // ✅ Composite unique constraint for Bookmarks
}
